name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint --if-present
      
    - name: Run tests
      run: npm test --if-present -- --coverage --watchAll=false
      
    - name: Build React app
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files-${{ matrix.node-version }}
        path: build/

  build-electron:
    needs: test
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build React app
      run: npm run build
      
    - name: Build Electron app
      run: npm run electron-pack
      
    - name: Upload Electron artifacts
      uses: actions/upload-artifact@v4
      with:
        name: electron-${{ matrix.os }}
        path: dist/

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for vulnerabilities
      run: npm audit --audit-level=high --json > audit-results.json || true
      
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: audit-results.json

  release:
    needs: [test, build-electron, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          ## üöÄ AI Desktop Client Release v${{ github.run_number }}
          
          ### ‚ú® Features
          - Cross-platform Electron app
          - Anthropic Claude API integration
          - Secure local API key storage
          - Document upload support (PDF, TXT, MD)
          - Modern Grok-style UI with dark/light themes
          - iOS/mobile optimized design
          
          ### üì¶ Downloads
          - **Windows**: `electron-windows-latest.zip`
          - **macOS**: `electron-macos-latest.zip`
          - **Linux**: `electron-ubuntu-latest.zip`
          
          ### üîí Security
          - All builds passed security scans
          - No high-severity vulnerabilities detected
          
          ### üõ†Ô∏è Installation
          1. Download the appropriate file for your OS
          2. Extract the archive
          3. Run the executable
          4. Enter your Anthropic API key
          
          **Get your API key**: [Anthropic Console](https://console.anthropic.com/)
        files: |
          electron-windows-latest.zip
          electron-macos-latest.zip
          electron-ubuntu-latest.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
